// <auto-generated>
// This code was generated by ShaderWrapperGenerator.
// </auto-generated>

using UnityEngine;
using System;

namespace PropertyGenerator.Generated
{
	[Serializable]
	public class PressSwitchWrapper
	{
		[SerializeField] private Renderer renderer;
		private Material target;
		private static readonly int PushRatioProperty = Shader.PropertyToID("_PushRatio");
		private static readonly int PushTextureProperty = Shader.PropertyToID("_PushTexture");
		private static readonly int MainColorTextureProperty = Shader.PropertyToID("_MainColorTexture");
		private static readonly int MetallicTextureProperty = Shader.PropertyToID("_MetallicTexture");
		private static readonly int MetallicIntensityProperty = Shader.PropertyToID("_MetallicIntensity");
		private static readonly int SmoothnessTextureProperty = Shader.PropertyToID("_SmoothnessTexture");
		private static readonly int SmoothnessIntensityProperty = Shader.PropertyToID("_SmoothnessIntensity");
		private static readonly int NormalMapTextureProperty = Shader.PropertyToID("_NormalMapTexture");
		private static readonly int NormalStrengthProperty = Shader.PropertyToID("_NormalStrength");
		private static readonly int EmissionTextureProperty = Shader.PropertyToID("_EmissionTexture");
		private static readonly int EmissionIntensityProperty = Shader.PropertyToID("_EmissionIntensity");
		private static readonly int DefaultEmissionColorProperty = Shader.PropertyToID("_DefaultEmissionColor");
		private static readonly int PushedEmissionColorProperty = Shader.PropertyToID("_PushedEmissionColor");
		private static readonly int AOTextureProperty = Shader.PropertyToID("_AOTexture");
		private static readonly int WorkflowModeProperty = Shader.PropertyToID("_WorkflowMode");
		private static readonly int CastShadowsProperty = Shader.PropertyToID("_CastShadows");
		private static readonly int ReceiveShadowsProperty = Shader.PropertyToID("_ReceiveShadows");
		private static readonly int SurfaceProperty = Shader.PropertyToID("_Surface");
		private static readonly int BlendProperty = Shader.PropertyToID("_Blend");
		private static readonly int AlphaClipProperty = Shader.PropertyToID("_AlphaClip");
		private static readonly int BlendModePreserveSpecularProperty = Shader.PropertyToID("_BlendModePreserveSpecular");
		private static readonly int SrcBlendProperty = Shader.PropertyToID("_SrcBlend");
		private static readonly int DstBlendProperty = Shader.PropertyToID("_DstBlend");
		private static readonly int ZWriteProperty = Shader.PropertyToID("_ZWrite");
		private static readonly int ZWriteControlProperty = Shader.PropertyToID("_ZWriteControl");
		private static readonly int ZTestProperty = Shader.PropertyToID("_ZTest");
		private static readonly int CullProperty = Shader.PropertyToID("_Cull");
		private static readonly int AlphaToMaskProperty = Shader.PropertyToID("_AlphaToMask");
		private static readonly int QueueOffsetProperty = Shader.PropertyToID("_QueueOffset");
		private static readonly int QueueControlProperty = Shader.PropertyToID("_QueueControl");
		private static readonly int unityLightmapsProperty = Shader.PropertyToID("_unityLightmaps");
		private static readonly int unityLightmapsIndProperty = Shader.PropertyToID("_unityLightmapsInd");
		private static readonly int unityShadowMasksProperty = Shader.PropertyToID("_unityShadowMasks");
		
		public PressSwitchWrapper() { }
		
		public PressSwitchWrapper(Material target)
		{
		   target = renderer.material;
		}
		
		private void CheckPersistentMaterial()
		{
		   if (target != null)
		   {
		       return;
		   }
		
		   target = renderer.material;
		}
		
		public float PushRatio
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(PushRatioProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(PushRatioProperty, value);
			}
		}
		
		public Texture PushTexture
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetTexture(PushTextureProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetTexture(PushTextureProperty, value);
			}
		}
		
		public Texture MainColorTexture
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetTexture(MainColorTextureProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetTexture(MainColorTextureProperty, value);
			}
		}
		
		public Texture MetallicTexture
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetTexture(MetallicTextureProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetTexture(MetallicTextureProperty, value);
			}
		}
		
		public float MetallicIntensity
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(MetallicIntensityProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(MetallicIntensityProperty, value);
			}
		}
		
		public Texture SmoothnessTexture
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetTexture(SmoothnessTextureProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetTexture(SmoothnessTextureProperty, value);
			}
		}
		
		public float SmoothnessIntensity
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(SmoothnessIntensityProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(SmoothnessIntensityProperty, value);
			}
		}
		
		public Texture NormalMapTexture
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetTexture(NormalMapTextureProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetTexture(NormalMapTextureProperty, value);
			}
		}
		
		public float NormalStrength
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(NormalStrengthProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(NormalStrengthProperty, value);
			}
		}
		
		public Texture EmissionTexture
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetTexture(EmissionTextureProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetTexture(EmissionTextureProperty, value);
			}
		}
		
		public float EmissionIntensity
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(EmissionIntensityProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(EmissionIntensityProperty, value);
			}
		}
		
		public Color DefaultEmissionColor
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetColor(DefaultEmissionColorProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetColor(DefaultEmissionColorProperty, value);
			}
		}
		
		public Color PushedEmissionColor
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetColor(PushedEmissionColorProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetColor(PushedEmissionColorProperty, value);
			}
		}
		
		public Texture AOTexture
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetTexture(AOTextureProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetTexture(AOTextureProperty, value);
			}
		}
		
		public float WorkflowMode
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(WorkflowModeProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(WorkflowModeProperty, value);
			}
		}
		
		public float CastShadows
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(CastShadowsProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(CastShadowsProperty, value);
			}
		}
		
		public float ReceiveShadows
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(ReceiveShadowsProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(ReceiveShadowsProperty, value);
			}
		}
		
		public float Surface
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(SurfaceProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(SurfaceProperty, value);
			}
		}
		
		public float Blend
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(BlendProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(BlendProperty, value);
			}
		}
		
		public float AlphaClip
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(AlphaClipProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(AlphaClipProperty, value);
			}
		}
		
		public float BlendModePreserveSpecular
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(BlendModePreserveSpecularProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(BlendModePreserveSpecularProperty, value);
			}
		}
		
		public float SrcBlend
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(SrcBlendProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(SrcBlendProperty, value);
			}
		}
		
		public float DstBlend
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(DstBlendProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(DstBlendProperty, value);
			}
		}
		
		public float ZWrite
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(ZWriteProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(ZWriteProperty, value);
			}
		}
		
		public float ZWriteControl
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(ZWriteControlProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(ZWriteControlProperty, value);
			}
		}
		
		public float ZTest
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(ZTestProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(ZTestProperty, value);
			}
		}
		
		public float Cull
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(CullProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(CullProperty, value);
			}
		}
		
		public float AlphaToMask
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(AlphaToMaskProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(AlphaToMaskProperty, value);
			}
		}
		
		public float QueueOffset
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(QueueOffsetProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(QueueOffsetProperty, value);
			}
		}
		
		public float QueueControl
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetFloat(QueueControlProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetFloat(QueueControlProperty, value);
			}
		}
		
		public Texture unityLightmaps
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetTexture(unityLightmapsProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetTexture(unityLightmapsProperty, value);
			}
		}
		
		public Texture unityLightmapsInd
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetTexture(unityLightmapsIndProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetTexture(unityLightmapsIndProperty, value);
			}
		}
		
		public Texture unityShadowMasks
		{
			get
			{
			  CheckPersistentMaterial();
			  return target.GetTexture(unityShadowMasksProperty);
			}
			set
			{
			  CheckPersistentMaterial();
			  target.SetTexture(unityShadowMasksProperty, value);
			}
		}
	}
}