using System;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEditor.Animations;
using UnityEngine;

namespace PropertyGenerator
{
    internal static class AnimatorWrapperGenerator
    {
        [MenuItem("Assets/PropertyGenerator/GenerateAnimatorWrapper", priority = 1)]
        private static void Init()
        {
            if (Selection.activeObject is AnimatorController animatorController)
            {
                Generate(animatorController);
            }
            else
            {
                Debug.LogError($"{nameof(AnimatorController)}以外のファイルが選択されています。");
            }
        }

        private static void Generate(AnimatorController animatorController)
        {
            string className = $"{animatorController.name.Replace(" ", String.Empty)}Wrapper";
            CodeBuilder codeBuilder = new CodeBuilder();

            codeBuilder.AddAutoGenerated(nameof(AnimatorWrapperGenerator));
            codeBuilder.AddNameSpace("System");
            codeBuilder.AddNameSpace("UnityEngine");

            using (codeBuilder.CreateBlockScope("namespace PropertyGenerator.Generated"))
            {
                codeBuilder.NewLine("[Serializable]");
                using (codeBuilder.CreateBlockScope("public class " + className))
                {
                    codeBuilder.NewLine($"[SerializeField] private {nameof(Animator)} target;");

                    //AnimatorControllerのパラメータをプロパティに変換する
                    foreach (var parameter in animatorController.parameters)
                    {
                        AddParameter(parameter, codeBuilder);
                    }
                }
            }
            
            //ソースファイルとして出力する
            SourceCreator.CreateFile(className, codeBuilder);
        }

        private static void AddParameter(AnimatorControllerParameter parameter, CodeBuilder builder)
        {
            //Triggerだったらメソッドとしてコード生成
            if (parameter.type == AnimatorControllerParameterType.Trigger)
            {
                builder.NewLine();
                using (builder.CreateBlockScope($"public void Set{parameter.name}Trigger()"))
                {
                    builder.NewLine($"target.SetTrigger({parameter.nameHash});");
                }

                return;
            }

            //それ以外はプロパティとしてコード生成
            string methodSuffix = GetMethodSuffix(parameter.type);
            
            builder.NewLine();
            using (builder.CreateBlockScope($"public {parameter.type.ToString().ToLower()} {parameter.name.Replace(" ", String.Empty)}"))
            {
                int nameHash = parameter.nameHash;
                builder.NewLine($"get => target.Get{methodSuffix}({nameHash});");
                builder.NewLine($"set => target.Set{methodSuffix}({nameHash}, value);");
            }
        }

        private static string GetMethodSuffix(AnimatorControllerParameterType type)
        {
            return type switch
            {
                AnimatorControllerParameterType.Float => "Float",
                AnimatorControllerParameterType.Int => "Integer",
                AnimatorControllerParameterType.Bool => "Bool",
                _ => throw new ArgumentOutOfRangeException()
            };
        }
    }
}