using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;
using UnityEngine.Audio;

namespace CoreModule.Sound
{
#if UNITY_EDITOR
    /// <summary>
    /// サウンドリソースへのキーとミキサータイプを生成するクラス
    /// </summary>
    internal static class SoundKeyGenerator
    {
        public static void Generate(IReadOnlyList<SoundSettings.AudioClipPair> audioClips, List<AudioMixerGroup> mixerGroups, string exportPath)
        {
            CodeBuilder codeBuilder = new CodeBuilder();
            codeBuilder.AddAutoGenerated(nameof(SoundKeyGenerator));
            string fileName = $"SoundConstants";

            using (codeBuilder.CreateBlockScope("namespace Core.Sound"))
            {
                // サウンドキーを生成する
                GenerateSoundKey(codeBuilder, audioClips);
                codeBuilder.NewLine();

                // ミキサータイプを生成する
                GenerateMixerType(codeBuilder, mixerGroups);
            }

            //ソースファイルとして出力する
            CreateFile(fileName, exportPath, codeBuilder);
        }

        private static void GenerateSoundKey(CodeBuilder codeBuilder, IReadOnlyList<SoundSettings.AudioClipPair> audioClips)
        {
            const string className = "SoundKey";

            using (codeBuilder.CreateBlockScope("public enum " + className))
            {
                foreach (SoundSettings.AudioClipPair clipPair in audioClips)
                {
                    if (clipPair.Key == String.Empty)
                    {
                        Debug.LogError("Keyが空です。");
                        return;
                    }

                    codeBuilder.NewLine($"{clipPair.Key},");
                }
            }
        }

        private static void GenerateMixerType(CodeBuilder codeBuilder, List<AudioMixerGroup> mixerGroups)
        {
            const string className = "MixerType";

            using (codeBuilder.CreateBlockScope("public enum " + className))
            {
                foreach (AudioMixerGroup mixerGroup in mixerGroups)
                {
                    if (mixerGroup == null)
                    {
                        continue;
                    }

                    codeBuilder.NewLine($"{mixerGroup.name},");
                }
            }
        }

        private static void CreateFile(string fileName, string exportPath, CodeBuilder builder)
        {
            exportPath = exportPath.Replace('/', Path.DirectorySeparatorChar);
            string path = Path.Combine(exportPath, fileName + ".cs");

            using (var stream = File.Create(path))
            {
                var generatedCode = builder.ToString();
                var bytes = new UTF8Encoding(true).GetBytes(generatedCode);
                stream.Write(bytes);
            }

            AssetDatabase.Refresh();

            Debug.Log(path + "にファイルを生成しました。");
        }
    }
#endif
}