using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;

namespace Module.Core.Constants.Generator
{
    public class LayerConstantsGenerator
    {
        private const string className = "Layer";
        private static readonly string savePath = $"Assets/Scripts/Module/Core/Constants/{className}.cs";

        [MenuItem("Tools/LayerNameGenerator", false, -99)]
        private static void ManualGenerate()
        {
            Generate();
            Debug.Log($"{savePath}にLayerの定数ファイルを作成しました。");
        }

        [InitializeOnLoadMethod]
        private static void Generate()
        {
            var builder = new CodeBuilder();
            builder.AddAutoGenerated(nameof(LayerConstantsGenerator));

            //レイヤー名とインデックスを取得
            List<(string name, int index)> layers = InternalEditorUtility.layers
                .Select(layerName => (layerName.Replace(" ", String.Empty), LayerMask.NameToLayer(layerName)))
                .ToList();

            using (builder.CreateBlockScope($"namespace {nameof(Module.Core.Constants)}"))
            {
                //レイヤーのインデックスを生成
                using (builder.CreateBlockScope($"public sealed class {className}"))
                {
                    foreach ((string name, int index) layer in layers)
                    {
                        builder.NewLine($"public const int {layer.name} = {layer.index};");
                    }

                    builder.NewLine();

                    //レイヤーマスクを生成
                    using (builder.CreateBlockScope($"public sealed class Mask"))
                    {
                        foreach ((string name, int index) layer in layers)
                        {
                            builder.NewLine($"public const int {layer.name} = {1 << layer.index};");
                        }
                    }
                }
            }

            CreateFile(builder);
        }

        private static void CreateFile(CodeBuilder builder)
        {
            using (var stream = File.Create(savePath))
            {
                var generatedCode = builder.ToString();
                var bytes = new UTF8Encoding(true).GetBytes(generatedCode);
                stream.Write(bytes);
            }

            AssetDatabase.Refresh();
        }
    }
}