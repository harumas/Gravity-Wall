using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;
using UnityEngine.InputSystem;

namespace Core.Input.Editor
{
    /// <summary>
    ///     InputActionのGuidを全て生成するクラス
    /// </summary>
    internal static class InputActionNameGenerator
    {
        private const string namespaceName = "Core.Input";
        private const string className = "ActionGuid";

        private const string requiredNamespace = "using System;\n";
        private static readonly string savePath = $"Assets/Scripts/Core/Input/Generated/{className}.cs";
        private static readonly string profilePath = Application.dataPath + "/Resources";

        private static InputActionAssetProfile profileAsset;

        [InitializeOnLoadMethod]
        private static void LoadProfile()
        {
            if (!Directory.Exists(profilePath))
            {
                Debug.LogError("Resources directory was not found!");
                return;
            }

            profileAsset = Resources.Load<InputActionAssetProfile>("InputActionAssetProfile");
            Debug.Assert(profileAsset != null,
                "InputActionAssetProfile was not found! \nPlease create a profile in the Resources folder.");
        }


        [MenuItem("InputSystem/LoadManual")]
        private static void LoadManual()
        {
            LoadProfile();
        }

        [MenuItem("InputSystem/GenerateActionName")]
        private static void Generate()
        {
            var usingAsset = profileAsset.GetUsingAsset();
            var builder = new StringBuilder();


            //ActionMapを集めるクラスの生成
            builder.Append(CreateActionMapCode(usingAsset));
            builder.Append("\n\n");

            //ActionMapのGuidを集めるクラスの生成
            foreach (var actionMap in usingAsset.actionMaps)
            {
                builder.Append(CreateInputActionCode(actionMap));
                builder.Append("\n\n");
            }

            //最後の改行は削除
            builder.Remove(builder.Length - 2, 2);

            //namespaceで囲む
            SurroundAsNamespace(builder, namespaceName);

            InsertRequiredNamespace(builder);
            InsertComment(builder);

            CreateFile(builder);

            Debug.Log(savePath + " にInputActionNameのGuidを生成しました。");
        }


        private static void CreateFile(StringBuilder builder)
        {
            using (var stream = File.Create(savePath))
            {
                var generatedCode = builder.ToString();
                var bytes = new UTF8Encoding(true).GetBytes(generatedCode);
                stream.Write(bytes);
            }

            AssetDatabase.Refresh();
        }

        private static void InsertComment(StringBuilder builder)
        {
            builder.Insert(0, "// <auto-generated>\n" +
                              $"// This code was generated by {nameof(InputActionNameGenerator)}.\n" +
                              "// </auto-generated>\n\n");
        }

        private static void InsertRequiredNamespace(StringBuilder builder)
        {
            builder.Insert(0, $"{requiredNamespace}\n");
        }


        private static StringBuilder CreateActionMapCode(InputActionAsset actionAsset)
        {
            var builder = new StringBuilder();

            if (actionAsset.actionMaps.Count == 0)
            {
                return builder;
            }

            foreach (var actionMap in actionAsset.actionMaps)
            {
                builder.Append(
                    $"       public static readonly {actionMap.name} {actionMap.name} = new {actionMap.name}();\n");
            }

            //最後の改行は削除
            builder.Remove(builder.Length - 1, 1);

            SurroundAsClass(builder, className, true);

            return builder;
        }

        private static StringBuilder CreateInputActionCode(InputActionMap actionMap)
        {
            var builder = new StringBuilder();

            builder.Append($"       public readonly Guid MapId = new Guid(\"{actionMap.id}\");\n");

            foreach (var inputAction in actionMap)
            {
                builder.Append($"       public readonly Guid {inputAction.name} = new Guid(\"{inputAction.id}\");\n");
            }

            //最後の改行は削除
            builder.Remove(builder.Length - 1, 1);

            SurroundAsClass(builder, actionMap.name, false);

            return builder;
        }

        private static void SurroundAsClass(StringBuilder builder, string className, bool isStatic)
        {
            if (builder.Length == 0)
            {
                builder.Append("{ }");
            }
            else
            {
                builder.Insert(0, "    {\n");
                builder.Append("\n    }");
            }

            builder.Insert(0, $"    public{(isStatic ? " static" : string.Empty)} class {className}\n");
        }


        private static void SurroundAsNamespace(StringBuilder builder, string namespaceName)
        {
            if (builder.Length == 0)
            {
                builder.Append("{ }");
            }
            else
            {
                builder.Insert(0, "{\n");
                builder.Append("\n}");
            }

            builder.Insert(0, $"namespace {namespaceName}\n");
        }
    }
}